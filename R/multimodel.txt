#model screening
library(rules)
library(baguette)

logistic_reg_spec <-
  logistic_reg(penalty = tune(), mixture = tune()) %>%
  set_engine("glmnet")

nnet_spec <-
  mlp(hidden_units = tune(), penalty = tune(), epochs = tune()) %>%
  set_engine("nnet", MaxNWts = 2600) %>%
  set_mode("classification")

nnet_param <-
  nnet_spec %>%
  parameters() %>%
  update(hidden_units = hidden_units(c(1, 27)))

mars_spec <-
  mars(prod_degree = tune()) %>%  #<- use GCV to choose terms
  set_engine("earth") %>%
  set_mode("classification")

svm_r_spec <-
  svm_rbf(cost = tune(), rbf_sigma = tune()) %>%
  set_engine("kernlab") %>%
  set_mode("classification")

svm_p_spec <-
  svm_poly(cost = tune(), degree = tune()) %>%
  set_engine("kernlab") %>%
  set_mode("classification")

knn_spec <-
  nearest_neighbor(neighbors = tune(), dist_power = tune(), weight_func = tune()) %>%
  set_engine("kknn") %>%
  set_mode("classification")

cart_spec <-
  decision_tree(cost_complexity = tune(), min_n = tune()) %>%
  set_engine("rpart") %>%
  set_mode("classification")

bag_cart_spec <-
  bag_tree() %>%
  set_engine("rpart", times = 50L) %>%
  set_mode("classification")

normalized_rec <-
  model_recipe %>%
  step_normalize(all_predictors())

poly_recipe <-
  normalized_rec %>%
  step_poly(all_predictors()) %>%
  step_interact(~ all_predictors():all_predictors())

normalized <-
  workflow_set(
    preproc = list(normalized = normalized_rec),
    models = list(SVM_radial = svm_r_spec, SVM_poly = svm_p_spec,
                  KNN = knn_spec, neural_network = nnet_spec)
  ) %>%
  option_add(param_info = nnet_param, id = "normalized_neural_network")
normalized

model_vars <-
  workflow_variables(outcomes = result,
                     predictors = everything())

no_pre_proc <-
  workflow_set(
    preproc = list(simple = model_vars),
    models = list(MARS = mars_spec, CART = cart_spec, CART_bagged = bag_cart_spec)
  )

with_features <-
  workflow_set(
    preproc = list(full_quad = poly_recipe),
    models = list(logistic_reg = logistic_reg_spec, KNN = knn_spec)
  )

all_workflows <-
  bind_rows(no_pre_proc, normalized, with_features) %>%
  # Make the workflow ID's a little more simple:
  mutate(wflow_id = gsub("(simple_)|(normalized_)", "", wflow_id))

grid_ctrl <-
  control_grid(
    save_pred = TRUE,
    parallel_over = "everything",
    save_workflow = TRUE
  )

grid_results <-
  all_workflows %>%
  workflow_map(
    seed = 1503,
    resamples = v_folds,
    grid = 25,
    control = grid_ctrl
  )

